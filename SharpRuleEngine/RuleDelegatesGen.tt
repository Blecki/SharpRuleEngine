<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="RuleGen.t4" #>
//This is generated code. Do not modify this file; modify the template that produces it.

using System;

namespace SharpRuleEngine
{
	public class RuleDelegateWrapper<TR>
	{
		public virtual TR Invoke(Object[] Arguments)
		{
			throw new NotImplementedException();
		}		

		public static RuleDelegateWrapper<TR> MakeWrapper(Func<TR> Delegate)
		{
			return new RuleDelegateWrapperImpl<TR> { Delegate = Delegate };
		}

		public virtual bool AreArgumentsCompatible(Object[] Arguments)
		{
			throw new NotImplementedException();
		}

<#for (var i = 1; i < 5; ++i){#>
		
		public static RuleDelegateWrapper<TR> MakeWrapper<<#Args(i);#>>(Func<<#Args(i);#>, TR> Delegate)
		{
			return new RuleDelegateWrapperImpl<<#Args(i);#>, TR> { Delegate = Delegate };
		}		
<#}#>
	}

	public class RuleDelegateWrapperImpl<TR> : RuleDelegateWrapper<TR>
	{
		internal Func<TR> Delegate;

		public override TR Invoke(Object[] Arguments)
		{
			return (TR)Delegate.DynamicInvoke(Arguments);
		}

		public override bool AreArgumentsCompatible(Object[] Arguments)
		{
			return Arguments.Length == 0;
		}
	}

<#for (var i = 1; i < 5; ++i){#>
	
	public class RuleDelegateWrapperImpl<<#Args(i);#>, TR> : RuleDelegateWrapper<TR>
	{
		internal Func<<#Args(i);#>, TR> Delegate;

		public override TR Invoke(Object[] Arguments)
		{
			return (TR)Delegate.DynamicInvoke(Arguments);
		}

		public override bool AreArgumentsCompatible(Object[] Arguments)
		{
			if (Arguments.Length != <#=i#>) return false;

<#for (var x = 0; x < i; ++x){#>
			if (Arguments[<#=x#>] != null && !typeof(T<#=x#>).IsAssignableFrom(Arguments[<#=x#>].GetType())) return false;
<#}#>

			return true;
		}
	}
<#}#>

}
