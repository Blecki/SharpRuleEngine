<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="RuleGen.t4" #>
//This is generated code. Do not modify this file; modify the template that produces it.

using System;

namespace SharpRuleEngine
{
	public partial class RuleSource
	{	
		public RuleBuilder<PerformResult> Perform(String Name)
		{
			if (Rules == null) Rules = new RuleSet(GlobalRules);
			return Rules.AddRule<PerformResult>(Name).Associate(this);
		}

		public RuleBuilder<RT> Value<RT>(String Name)
		{
			if (Rules == null) Rules = new RuleSet(GlobalRules);
			return Rules.AddRule<RT>(Name).Associate(this);
		}

		public RuleBuilder<CheckResult> Check(String Name)
		{
			if (Rules == null) Rules = new RuleSet(GlobalRules);
			return Rules.AddRule<CheckResult>(Name).Associate(this);
		}

<#for (var i = 1; i < 5; ++i){#>
		public RuleBuilder<<#Args(i);#>, PerformResult> Perform<<#Args(i);#>>(String Name)
		{
			if (Rules == null) Rules = new RuleSet(GlobalRules);
			return Rules.AddRule<<#Args(i);#>, PerformResult>(Name).Associate(this);
		}

		public RuleBuilder<<#Args(i);#>, RT> Value<<#Args(i);#>, RT>(String Name)
		{
			if (Rules == null) Rules = new RuleSet(GlobalRules);
			return Rules.AddRule<<#Args(i);#>, RT>(Name).Associate(this);
		}

		public RuleBuilder<<#Args(i);#>, CheckResult> Check<<#Args(i);#>>(String Name)
		{
			if (Rules == null) Rules = new RuleSet(GlobalRules);
			return Rules.AddRule<<#Args(i);#>, CheckResult>(Name).Associate(this);
		}
<#}#>
	}
}
