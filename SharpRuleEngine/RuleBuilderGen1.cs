//This is generated code. Do not modify this file; modify the template that produces it.

using System;

namespace SharpRuleEngine
{
	public class RuleBuilder<TR>
    {
        public Rule<TR> Rule;

		//The associated object is set by the MudObject rule factory functions and used to
        // implement useful shortcuts on the rule builder types.
        public RuleObject AssociatedObject = null;

        public RuleBuilder<TR> When(Func<bool> Clause)
        {
			if (Rule.WhenClause != null) 
			{
				var oldClause = Rule.WhenClause;
				Rule.WhenClause = RuleDelegateWrapper<bool>.MakeWrapper(
					new Func<bool>(() => { 
						return oldClause.Invoke(null) && Clause();
					})
				);
			}
            else
				Rule.WhenClause = RuleDelegateWrapper<bool>.MakeWrapper(Clause);
            return this;
        }

        public RuleBuilder<TR> Do(Func<TR> Clause)
        {
            Rule.BodyClause = RuleDelegateWrapper<TR>.MakeWrapper(Clause);
            return this;
        }

        public RuleBuilder<TR> Name(String Name)
        {
            Rule.DescriptiveName = Name;
            return this;
        }

        public RuleBuilder<TR> ID(String ID)
        {
            Rule.ID = ID;
            return this;
        }

		public RuleBuilder<TR> First {
		get {
			Rule.Priority = RulePriority.First;
			return this;
		}}

		public RuleBuilder<TR> Last {
		get {
			Rule.Priority = RulePriority.Last;
			return this;
		}}

		public RuleBuilder<TR> Associate(RuleObject Object)
		{
			this.AssociatedObject = Object;
			return this;
		}		 

		private class WrappedBoolean { public bool Value = false; }

		public RuleBuilder<TR> FirstTimeOnly
		{get{
			var beenCalled = new WrappedBoolean();
			return this.When(() =>
			{
				if (beenCalled.Value) return false;
				beenCalled.Value = true;
				return true;
			});
		}}
    }

	public class RuleBuilder<T0, TR>
    {
        public Rule<TR> Rule;

		//The associated object is set by the MudObject rule factory functions and used to
        // implement useful shortcuts on the rule builder types.
        public RuleObject AssociatedObject = null;

        public RuleBuilder<T0, TR> When(Func<T0, bool> Clause)
        {
			if (Rule.WhenClause != null) 
			{
				var oldClause = Rule.WhenClause;
				Rule.WhenClause = RuleDelegateWrapper<bool>.MakeWrapper(
					new Func<T0, bool>((P0) => { 
						return oldClause.Invoke(new Object[]{P0}) && Clause(P0);
					})
				);
			}
            else
				Rule.WhenClause = RuleDelegateWrapper<bool>.MakeWrapper(Clause);
            return this;
        }

        public RuleBuilder<T0, TR> Do(Func<T0, TR> Clause)
        {
            Rule.BodyClause = RuleDelegateWrapper<TR>.MakeWrapper(Clause);
            return this;
        }

        public RuleBuilder<T0, TR> Name(String Name)
        {
            Rule.DescriptiveName = Name;
            return this;
        }

        public RuleBuilder<T0, TR> ID(String ID)
        {
            Rule.ID = ID;
            return this;
        }

		public RuleBuilder<T0, TR> First {
		get {
			Rule.Priority = RulePriority.First;
			return this;
		}}

		public RuleBuilder<T0, TR> Last {
		get {
			Rule.Priority = RulePriority.Last;
			return this;
		}}

		public RuleBuilder<T0, TR> Associate(RuleObject Object)
		{
			this.AssociatedObject = Object;
			return this;
		}

		/// <summary>
		/// Add a when clause that passes only if the associated object is one of the arguments to the rule.
        /// This is only valid if the rule was generated by a mud object factory function.
		/// </summary>
		public RuleBuilder<T0, TR> ThisOnly()
        {
			if (AssociatedObject == null) throw new InvalidOperationException("ThisOnly is only valid for rules created by a MudObject factory function.");
			return this.When((P0) =>
			{
				if (System.Object.ReferenceEquals(P0, AssociatedObject)) return true; 
				
				return false;
			});
        }

		/// <summary>
		/// Add a when clause that passes only if the associated object is the Nth argument to the rule.
		/// This is only valid if the rule was generated by a mud object factory function. 
		/// </summary>
		public RuleBuilder<T0, TR> ThisOnly(int N)
		{
			if (AssociatedObject == null) throw new InvalidOperationException("ThisOnly is only valid for rules created by a MudObject factory function.");
			if (N < 0 || N >= 1) throw new IndexOutOfRangeException();
			return this.When((P0) =>
			{
				var pArray = new Object[]{P0};
				return System.Object.ReferenceEquals(AssociatedObject, pArray[N]);
			});
		}

		private class WrappedBoolean { public bool Value = false; }

		/// <summary>
		/// Add a when clause that passes the first time it is queried, and fails all subsequent times.
		/// </summary>
		public RuleBuilder<T0, TR> FirstTimeOnly
		{get{
			var beenCalled = new WrappedBoolean();
			return this.When((P0) =>
			{
				if (beenCalled.Value) return false;
				beenCalled.Value = true;
				return true;
			});
		}}
	}

	public class RuleBuilder<T0, T1, TR>
    {
        public Rule<TR> Rule;

		//The associated object is set by the MudObject rule factory functions and used to
        // implement useful shortcuts on the rule builder types.
        public RuleObject AssociatedObject = null;

        public RuleBuilder<T0, T1, TR> When(Func<T0, T1, bool> Clause)
        {
			if (Rule.WhenClause != null) 
			{
				var oldClause = Rule.WhenClause;
				Rule.WhenClause = RuleDelegateWrapper<bool>.MakeWrapper(
					new Func<T0, T1, bool>((P0, P1) => { 
						return oldClause.Invoke(new Object[]{P0, P1}) && Clause(P0, P1);
					})
				);
			}
            else
				Rule.WhenClause = RuleDelegateWrapper<bool>.MakeWrapper(Clause);
            return this;
        }

        public RuleBuilder<T0, T1, TR> Do(Func<T0, T1, TR> Clause)
        {
            Rule.BodyClause = RuleDelegateWrapper<TR>.MakeWrapper(Clause);
            return this;
        }

        public RuleBuilder<T0, T1, TR> Name(String Name)
        {
            Rule.DescriptiveName = Name;
            return this;
        }

        public RuleBuilder<T0, T1, TR> ID(String ID)
        {
            Rule.ID = ID;
            return this;
        }

		public RuleBuilder<T0, T1, TR> First {
		get {
			Rule.Priority = RulePriority.First;
			return this;
		}}

		public RuleBuilder<T0, T1, TR> Last {
		get {
			Rule.Priority = RulePriority.Last;
			return this;
		}}

		public RuleBuilder<T0, T1, TR> Associate(RuleObject Object)
		{
			this.AssociatedObject = Object;
			return this;
		}

		/// <summary>
		/// Add a when clause that passes only if the associated object is one of the arguments to the rule.
        /// This is only valid if the rule was generated by a mud object factory function.
		/// </summary>
		public RuleBuilder<T0, T1, TR> ThisOnly()
        {
			if (AssociatedObject == null) throw new InvalidOperationException("ThisOnly is only valid for rules created by a MudObject factory function.");
			return this.When((P0, P1) =>
			{
				if (System.Object.ReferenceEquals(P0, AssociatedObject)) return true; 
				if (System.Object.ReferenceEquals(P1, AssociatedObject)) return true; 
				
				return false;
			});
        }

		/// <summary>
		/// Add a when clause that passes only if the associated object is the Nth argument to the rule.
		/// This is only valid if the rule was generated by a mud object factory function. 
		/// </summary>
		public RuleBuilder<T0, T1, TR> ThisOnly(int N)
		{
			if (AssociatedObject == null) throw new InvalidOperationException("ThisOnly is only valid for rules created by a MudObject factory function.");
			if (N < 0 || N >= 2) throw new IndexOutOfRangeException();
			return this.When((P0, P1) =>
			{
				var pArray = new Object[]{P0, P1};
				return System.Object.ReferenceEquals(AssociatedObject, pArray[N]);
			});
		}

		private class WrappedBoolean { public bool Value = false; }

		/// <summary>
		/// Add a when clause that passes the first time it is queried, and fails all subsequent times.
		/// </summary>
		public RuleBuilder<T0, T1, TR> FirstTimeOnly
		{get{
			var beenCalled = new WrappedBoolean();
			return this.When((P0, P1) =>
			{
				if (beenCalled.Value) return false;
				beenCalled.Value = true;
				return true;
			});
		}}
	}

	public class RuleBuilder<T0, T1, T2, TR>
    {
        public Rule<TR> Rule;

		//The associated object is set by the MudObject rule factory functions and used to
        // implement useful shortcuts on the rule builder types.
        public RuleObject AssociatedObject = null;

        public RuleBuilder<T0, T1, T2, TR> When(Func<T0, T1, T2, bool> Clause)
        {
			if (Rule.WhenClause != null) 
			{
				var oldClause = Rule.WhenClause;
				Rule.WhenClause = RuleDelegateWrapper<bool>.MakeWrapper(
					new Func<T0, T1, T2, bool>((P0, P1, P2) => { 
						return oldClause.Invoke(new Object[]{P0, P1, P2}) && Clause(P0, P1, P2);
					})
				);
			}
            else
				Rule.WhenClause = RuleDelegateWrapper<bool>.MakeWrapper(Clause);
            return this;
        }

        public RuleBuilder<T0, T1, T2, TR> Do(Func<T0, T1, T2, TR> Clause)
        {
            Rule.BodyClause = RuleDelegateWrapper<TR>.MakeWrapper(Clause);
            return this;
        }

        public RuleBuilder<T0, T1, T2, TR> Name(String Name)
        {
            Rule.DescriptiveName = Name;
            return this;
        }

        public RuleBuilder<T0, T1, T2, TR> ID(String ID)
        {
            Rule.ID = ID;
            return this;
        }

		public RuleBuilder<T0, T1, T2, TR> First {
		get {
			Rule.Priority = RulePriority.First;
			return this;
		}}

		public RuleBuilder<T0, T1, T2, TR> Last {
		get {
			Rule.Priority = RulePriority.Last;
			return this;
		}}

		public RuleBuilder<T0, T1, T2, TR> Associate(RuleObject Object)
		{
			this.AssociatedObject = Object;
			return this;
		}

		/// <summary>
		/// Add a when clause that passes only if the associated object is one of the arguments to the rule.
        /// This is only valid if the rule was generated by a mud object factory function.
		/// </summary>
		public RuleBuilder<T0, T1, T2, TR> ThisOnly()
        {
			if (AssociatedObject == null) throw new InvalidOperationException("ThisOnly is only valid for rules created by a MudObject factory function.");
			return this.When((P0, P1, P2) =>
			{
				if (System.Object.ReferenceEquals(P0, AssociatedObject)) return true; 
				if (System.Object.ReferenceEquals(P1, AssociatedObject)) return true; 
				if (System.Object.ReferenceEquals(P2, AssociatedObject)) return true; 
				
				return false;
			});
        }

		/// <summary>
		/// Add a when clause that passes only if the associated object is the Nth argument to the rule.
		/// This is only valid if the rule was generated by a mud object factory function. 
		/// </summary>
		public RuleBuilder<T0, T1, T2, TR> ThisOnly(int N)
		{
			if (AssociatedObject == null) throw new InvalidOperationException("ThisOnly is only valid for rules created by a MudObject factory function.");
			if (N < 0 || N >= 3) throw new IndexOutOfRangeException();
			return this.When((P0, P1, P2) =>
			{
				var pArray = new Object[]{P0, P1, P2};
				return System.Object.ReferenceEquals(AssociatedObject, pArray[N]);
			});
		}

		private class WrappedBoolean { public bool Value = false; }

		/// <summary>
		/// Add a when clause that passes the first time it is queried, and fails all subsequent times.
		/// </summary>
		public RuleBuilder<T0, T1, T2, TR> FirstTimeOnly
		{get{
			var beenCalled = new WrappedBoolean();
			return this.When((P0, P1, P2) =>
			{
				if (beenCalled.Value) return false;
				beenCalled.Value = true;
				return true;
			});
		}}
	}

	public class RuleBuilder<T0, T1, T2, T3, TR>
    {
        public Rule<TR> Rule;

		//The associated object is set by the MudObject rule factory functions and used to
        // implement useful shortcuts on the rule builder types.
        public RuleObject AssociatedObject = null;

        public RuleBuilder<T0, T1, T2, T3, TR> When(Func<T0, T1, T2, T3, bool> Clause)
        {
			if (Rule.WhenClause != null) 
			{
				var oldClause = Rule.WhenClause;
				Rule.WhenClause = RuleDelegateWrapper<bool>.MakeWrapper(
					new Func<T0, T1, T2, T3, bool>((P0, P1, P2, P3) => { 
						return oldClause.Invoke(new Object[]{P0, P1, P2, P3}) && Clause(P0, P1, P2, P3);
					})
				);
			}
            else
				Rule.WhenClause = RuleDelegateWrapper<bool>.MakeWrapper(Clause);
            return this;
        }

        public RuleBuilder<T0, T1, T2, T3, TR> Do(Func<T0, T1, T2, T3, TR> Clause)
        {
            Rule.BodyClause = RuleDelegateWrapper<TR>.MakeWrapper(Clause);
            return this;
        }

        public RuleBuilder<T0, T1, T2, T3, TR> Name(String Name)
        {
            Rule.DescriptiveName = Name;
            return this;
        }

        public RuleBuilder<T0, T1, T2, T3, TR> ID(String ID)
        {
            Rule.ID = ID;
            return this;
        }

		public RuleBuilder<T0, T1, T2, T3, TR> First {
		get {
			Rule.Priority = RulePriority.First;
			return this;
		}}

		public RuleBuilder<T0, T1, T2, T3, TR> Last {
		get {
			Rule.Priority = RulePriority.Last;
			return this;
		}}

		public RuleBuilder<T0, T1, T2, T3, TR> Associate(RuleObject Object)
		{
			this.AssociatedObject = Object;
			return this;
		}

		/// <summary>
		/// Add a when clause that passes only if the associated object is one of the arguments to the rule.
        /// This is only valid if the rule was generated by a mud object factory function.
		/// </summary>
		public RuleBuilder<T0, T1, T2, T3, TR> ThisOnly()
        {
			if (AssociatedObject == null) throw new InvalidOperationException("ThisOnly is only valid for rules created by a MudObject factory function.");
			return this.When((P0, P1, P2, P3) =>
			{
				if (System.Object.ReferenceEquals(P0, AssociatedObject)) return true; 
				if (System.Object.ReferenceEquals(P1, AssociatedObject)) return true; 
				if (System.Object.ReferenceEquals(P2, AssociatedObject)) return true; 
				if (System.Object.ReferenceEquals(P3, AssociatedObject)) return true; 
				
				return false;
			});
        }

		/// <summary>
		/// Add a when clause that passes only if the associated object is the Nth argument to the rule.
		/// This is only valid if the rule was generated by a mud object factory function. 
		/// </summary>
		public RuleBuilder<T0, T1, T2, T3, TR> ThisOnly(int N)
		{
			if (AssociatedObject == null) throw new InvalidOperationException("ThisOnly is only valid for rules created by a MudObject factory function.");
			if (N < 0 || N >= 4) throw new IndexOutOfRangeException();
			return this.When((P0, P1, P2, P3) =>
			{
				var pArray = new Object[]{P0, P1, P2, P3};
				return System.Object.ReferenceEquals(AssociatedObject, pArray[N]);
			});
		}

		private class WrappedBoolean { public bool Value = false; }

		/// <summary>
		/// Add a when clause that passes the first time it is queried, and fails all subsequent times.
		/// </summary>
		public RuleBuilder<T0, T1, T2, T3, TR> FirstTimeOnly
		{get{
			var beenCalled = new WrappedBoolean();
			return this.When((P0, P1, P2, P3) =>
			{
				if (beenCalled.Value) return false;
				beenCalled.Value = true;
				return true;
			});
		}}
	}

}
