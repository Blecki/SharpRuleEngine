<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="RuleGen.t4" #>
//This is generated code. Do not modify this file; modify the template that produces it.

using System;
using System.Collections.Generic;

namespace RMUD
{
	public partial class RuleEngine
	{	
		public void DeclarePerformRuleBook(String Name, String Description)
		{
			Rules.FindOrCreateRuleBook<PerformResult>(Name, 0).Description = Description;
		}
		
		public void DeclareValueRuleBook<RT>(String Name, String Description)
        {
		    Rules.FindOrCreateRuleBook<RT>(Name, 0).Description = Description;
        }

		public void DeclareCheckRuleBook(String Name, String Description)
		{
			Rules.FindOrCreateRuleBook<CheckResult>(Name, 0).Description = Description;
		}
				
        public RuleBuilder<PerformResult> Perform(String Name)
        {
			var rule = new Rule<PerformResult>();
			CreateNewRule(() => { Rules.FindOrCreateRuleBook<PerformResult>(Name, 0).AddRule(rule); });
			return new RuleBuilder<PerformResult> { Rule = rule };
        }
		
        public RuleBuilder<RT> Value<RT>(String Name)
        {
			var rule = new Rule<RT>();
			CreateNewRule(() => { Rules.FindOrCreateRuleBook<RT>(Name, 0).AddRule(rule); });
			return new RuleBuilder<RT> { Rule = rule };
        }

		public RuleBuilder<CheckResult> Check(String Name)
        {
			var rule = new Rule<CheckResult>();
			CreateNewRule(() => { Rules.FindOrCreateRuleBook<CheckResult>(Name, 0).AddRule(rule); });
			return new RuleBuilder<CheckResult> { Rule = rule };
        }

<#for (var i = 1; i < ac; ++i){#>
		public void DeclarePerformRuleBook<<#Args(i);#>>(String Name, String Description, params String[] ArgumentNames)
		{
			Rules.FindOrCreateRuleBook<PerformResult>(Name, <#=i#>).Description = Description;
		}
		
		public void DeclareValueRuleBook<<#Args(i);#>, RT>(String Name, String Description, params String[] ArgumentNames)
        {
            Rules.FindOrCreateRuleBook<RT>(Name, <#=i#>).Description = Description;
		}

		public void DeclareCheckRuleBook<<#Args(i);#>>(String Name, String Description, params String[] ArgumentNames)
		{
			Rules.FindOrCreateRuleBook<CheckResult>(Name, <#=i#>).Description = Description;
		}
				
        public RuleBuilder<<#Args(i);#>, PerformResult> Perform<<#Args(i);#>>(String Name)
        {
			var rule = new Rule<PerformResult>();
			CreateNewRule(() => { Rules.FindOrCreateRuleBook<PerformResult>(Name, <#=i#>).AddRule(rule); });
			return new RuleBuilder<<#Args(i);#>, PerformResult> { Rule = rule };
        }
		
        public RuleBuilder<<#Args(i);#>, RT> Value<<#Args(i);#>, RT>(String Name)
        {
			var rule = new Rule<RT>();
			CreateNewRule(() => { Rules.FindOrCreateRuleBook<RT>(Name, <#=i#>).AddRule(rule); });
			return new RuleBuilder<<#Args(i);#>, RT> { Rule = rule };
        }

		public RuleBuilder<<#Args(i);#>, CheckResult> Check<<#Args(i);#>>(String Name)
        {
			var rule = new Rule<CheckResult>();
			CreateNewRule(() => { Rules.FindOrCreateRuleBook<CheckResult>(Name, <#=i#>).AddRule(rule); });
			return new RuleBuilder<<#Args(i);#>, CheckResult> { Rule = rule };
        }

<#}#>
	}
}
