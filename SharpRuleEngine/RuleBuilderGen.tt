<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="RuleGen.t4" #>
//This is generated code. Do not modify this file; modify the template that produces it.

using System;

namespace SharpRuleEngine
{

	public class RuleBuilder<TR>
    {
        public Rule<TR> Rule;

        public RuleBuilder<TR> When(Func<bool> Clause)
        {
            Rule.WhenClause = RuleDelegateWrapper<bool>.MakeWrapper(Clause);
            return this;
        }

        public RuleBuilder<TR> Do(Func<TR> Clause)
        {
            Rule.BodyClause = RuleDelegateWrapper<TR>.MakeWrapper(Clause);
            return this;
        }

        public RuleBuilder<TR> Name(String Name)
        {
            Rule.DescriptiveName = Name;
            return this;
        }

        public RuleBuilder<TR> ID(String ID)
        {
            Rule.ID = ID;
            return this;
        }

		public RuleBuilder<TR> First {
		get {
			Rule.Priority = RulePriority.First;
			return this;
		}}

		public RuleBuilder<TR> Last {
		get {
			Rule.Priority = RulePriority.Last;
			return this;
		}}
    }

<#for (var i = 1; i < 5; ++i){#>
	public class RuleBuilder<<# Args(i); #>, TR>
    {
        public Rule<TR> Rule;

        public RuleBuilder<<#Args(i);#>, TR> When(Func<<#Args(i);#>, bool> Clause)
        {
            Rule.WhenClause = RuleDelegateWrapper<bool>.MakeWrapper(Clause);
            return this;
        }

        public RuleBuilder<<#Args(i);#>, TR> Do(Func<<#Args(i);#>, TR> Clause)
        {
            Rule.BodyClause = RuleDelegateWrapper<TR>.MakeWrapper(Clause);
            return this;
        }

        public RuleBuilder<<#Args(i);#>, TR> Name(String Name)
        {
            Rule.DescriptiveName = Name;
            return this;
        }

        public RuleBuilder<<#Args(i);#>, TR> ID(String ID)
        {
            Rule.ID = ID;
            return this;
        }

		public RuleBuilder<<#Args(i);#>, TR> First {
		get {
			Rule.Priority = RulePriority.First;
			return this;
		}}

		public RuleBuilder<<#Args(i);#>, TR> Last {
		get {
			Rule.Priority = RulePriority.Last;
			return this;
		}}
    }

<#}#>
}
